import React from "react";
import CodeViewer from "src/components/codeviewer.js";
import CodeViewerDocs from "src/stories/components/codeviewer/codviewerdocs.mdx";
import { withKnobs } from "@storybook/addon-knobs";

//Export component to Storybook
const Template = (args) => <CodeViewer {...args} />;

// A story for testing
export const alpha = Template.bind({});
alpha.args = {
   className: "",
   code:
      '[\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "oracleAddress",\n            type: "address",\n         },\n      ],\n      name: "isProviderInitiated",\n      outputs: [\n         {\n            name: "",\n            type: "bool",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n      ],\n      name: "getProviderCurve",\n      outputs: [\n         {\n            name: "",\n            type: "int256[]",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n         {\n            name: "curve",\n            type: "int256[]",\n         },\n         {\n            name: "broker",\n            type: "address",\n         },\n      ],\n      name: "initiateProviderCurve",\n      outputs: [\n         {\n            name: "",\n            type: "bool",\n         },\n      ],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n      ],\n      name: "getAllProviderParams",\n      outputs: [\n         {\n            name: "",\n            type: "bytes32[]",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [],\n      name: "db",\n      outputs: [\n         {\n            name: "",\n            type: "address",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n         {\n            name: "key",\n            type: "bytes32",\n         },\n      ],\n      name: "getProviderParameter",\n      outputs: [\n         {\n            name: "",\n            type: "bytes",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n      ],\n      name: "getProviderPublicKey",\n      outputs: [\n         {\n            name: "",\n            type: "uint256",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n      ],\n      name: "getProviderTitle",\n      outputs: [\n         {\n            name: "",\n            type: "bytes32",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n      ],\n      name: "getCurveUnset",\n      outputs: [\n         {\n            name: "",\n            type: "bool",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "key",\n            type: "bytes32",\n         },\n         {\n            name: "value",\n            type: "bytes",\n         },\n      ],\n      name: "setProviderParameter",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [],\n      name: "getAllOracles",\n      outputs: [\n         {\n            name: "",\n            type: "address[]",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [],\n      name: "updateDependencies",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n      ],\n      name: "getPublicKey",\n      outputs: [\n         {\n            name: "",\n            type: "uint256",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n      ],\n      name: "getProviderCurveLength",\n      outputs: [\n         {\n            name: "",\n            type: "uint256",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [],\n      name: "owner",\n      outputs: [\n         {\n            name: "",\n            type: "address",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n      ],\n      name: "clearEndpoint",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "index",\n            type: "uint256",\n         },\n      ],\n      name: "getOracleAddress",\n      outputs: [\n         {\n            name: "",\n            type: "address",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "oracleAddress",\n            type: "address",\n         },\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n      ],\n      name: "getEndpointBroker",\n      outputs: [\n         {\n            name: "",\n            type: "address",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [],\n      name: "selfDestruct",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n      ],\n      name: "getProviderEndpoints",\n      outputs: [\n         {\n            name: "",\n            type: "bytes32[]",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "publicKey",\n            type: "uint256",\n         },\n         {\n            name: "title",\n            type: "bytes32",\n         },\n      ],\n      name: "initiateProvider",\n      outputs: [\n         {\n            name: "",\n            type: "bool",\n         },\n      ],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n      ],\n      name: "getEndpointParams",\n      outputs: [\n         {\n            name: "",\n            type: "bytes32[]",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "newOwner",\n            type: "address",\n         },\n      ],\n      name: "transferOwnership",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: true,\n      inputs: [\n         {\n            name: "provider",\n            type: "address",\n         },\n      ],\n      name: "getTitle",\n      outputs: [\n         {\n            name: "",\n            type: "bytes32",\n         },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "title",\n            type: "bytes32",\n         },\n      ],\n      name: "setProviderTitle",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      constant: false,\n      inputs: [\n         {\n            name: "endpoint",\n            type: "bytes32",\n         },\n         {\n            name: "endpointParams",\n            type: "bytes32[]",\n         },\n      ],\n      name: "setEndpointParams",\n      outputs: [],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "function",\n   },\n   {\n      inputs: [\n         {\n            name: "c",\n            type: "address",\n         },\n      ],\n      payable: false,\n      stateMutability: "nonpayable",\n      type: "constructor",\n   },\n   {\n      anonymous: false,\n      inputs: [\n         {\n            indexed: true,\n            name: "provider",\n            type: "address",\n         },\n         {\n            indexed: true,\n            name: "title",\n            type: "bytes32",\n         },\n      ],\n      name: "NewProvider",\n      type: "event",\n   },\n   {\n      anonymous: false,\n      inputs: [\n         {\n            indexed: true,\n            name: "provider",\n            type: "address",\n         },\n         {\n            indexed: true,\n            name: "endpoint",\n            type: "bytes32",\n         },\n         {\n            indexed: false,\n            name: "curve",\n            type: "int256[]",\n         },\n         {\n            indexed: true,\n            name: "broker",\n            type: "address",\n         },\n      ],\n      name: "NewCurve",\n      type: "event",\n   },\n   {\n      anonymous: false,\n      inputs: [\n         {\n            indexed: true,\n            name: "previousOwner",\n            type: "address",\n         },\n         {\n            indexed: true,\n            name: "newOwner",\n            type: "address",\n         },\n      ],\n      name: "OwnershipTransferred",\n      type: "event",\n   },\n];',
};
alpha.storyName = "Large Viewport with Code";
alpha.parameters = {
   viewport: {
      defaultViewport: "lg",
   },
};

export const beta = Template.bind({});
beta.args = {

};
beta.storyName = "Small Viewport with No Code";
beta.parameters = {
   viewport: {
      defaultViewport: "sm",
   },
};

// Story data
export default {
   title: "components/Code Viewer",
   component: CodeViewer,
   parameters: {
      docs: {
         page: CodeViewerDocs,
      },
   },
   decorators: [withKnobs],
};
